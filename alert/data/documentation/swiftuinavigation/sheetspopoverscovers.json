{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library comes with new tools for driving sheets, popovers and covers from optional and enum"},{"type":"text","text":" "},{"type":"text","text":"state."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Sheets"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Popovers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Covers"}]}]}]},{"anchor":"Sheets","level":3,"type":"heading","text":"Sheets"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Suppose your view or model holds a piece of optional state that represents whether or not a modal"},{"type":"text","text":" "},{"type":"text","text":"sheet is presented:"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","  @State var destination: Int?","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further suppose that the screen being presented wants a binding to the integer when it is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"sheet(unwrapping:)"},{"type":"text","text":" view modifier that comes with the library:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some View {","  List {","    \/\/ ...","  }","  .sheet(unwrapping: self.$destination) { $number in ","    CounterView(number: $number)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that the trailing closure is handed a binding to the unwrapped state. This binding can be"},{"type":"text","text":" "},{"type":"text","text":"handed to the child view, and any changes made by the parent will be reflected in the child, and"},{"type":"text","text":" "},{"type":"text","text":"vice-versa."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes it is not optimal to model presentation destinations as optionals. In particular, if a"},{"type":"text","text":" "},{"type":"text","text":"feature can navigate to multiple, mutually exclusive screens, then an enum is more appropriate."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is an additional overload of the "},{"type":"codeVoice","code":"sheet"},{"type":"text","text":" for this situation. If you model your destinations"},{"type":"text","text":" "},{"type":"text","text":"as an enum:"}]},{"type":"codeListing","syntax":"swift","code":["@State var destination: Destination?","","enum Destination {","  var counter(Int)","  \/\/ More destinations","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you can show a sheet from the "},{"type":"codeVoice","code":"counter"},{"type":"text","text":" case with the following:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some View {","  List {","    \/\/ ...","  }","  .sheet(","    unwrapping: self.$destination,","    case: \/Destination.counter","  ) { $number in ","    CounterView(number: $number)","  }","}"]},{"anchor":"Popovers","level":3,"type":"heading","text":"Popovers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Popovers work similarly to covers. If the popover’s state is represented as an optional you can do"},{"type":"text","text":" "},{"type":"text","text":"the following:"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","  @State var destination: Int?","","  var body: some View {","    List {","      \/\/ ...","    }","    .popover(unwrapping: self.$destination) { $number in ","      CounterView(number: $number)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if the popover state is represented as an enum, then you can do the following:"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","  @State var destination: Destination?","  enum Destination {","    case counter(Int)","    \/\/ More destinations","  }","","  var body: some View {","    List {","      \/\/ ...","    }","    .popover(","      unwrapping: self.$destination,","      case: \/Destination.counter","    ) { $number in ","      CounterView(number: $number)","    }","  }","}"]},{"anchor":"Covers","level":3,"type":"heading","text":"Covers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Full screen covers work similarly to covers and sheets. If the cover’s state is represented as an"},{"type":"text","text":" "},{"type":"text","text":"optional you can do the following:"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","  @State var destination: Int?","","  var body: some View {","    List {","      \/\/ ...","    }","    .fullscreenCover(unwrapping: self.$destination) { $number in ","      CounterView(number: $number)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if the cover’s’ state is represented as an enum, then you can do the following:"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","  @State var destination: Destination?","  enum Destination {","    case counter(Int)","    \/\/ More destinations","  }","","  var body: some View {","    List {","      \/\/ ...","    }","    .fullscreenCover(","      unwrapping: self.$destination,","      case: \/Destination.counter","    ) { $number in ","      CounterView(number: $number)","    }","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftuinavigation\/sheetspopoverscovers"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/SheetsPopoversCovers","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to present sheets, popovers and covers in a concise and testable manner."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Sheets, popovers, and covers","role":"article","modules":[{"name":"SwiftUINavigation"}]},"hierarchy":{"paths":[["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation"],["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/WhatIsNavigation"]]},"seeAlsoSections":[{"title":"Tools","identifiers":["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Navigation","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/AlertsDialogs","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/DestructuringViews","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Bindings"],"generated":true}],"references":{"#Popovers":{"title":"Popovers","titleInlineContent":[{"type":"text","text":"Popovers"}],"type":"link","identifier":"#Popovers","url":"#Popovers"},"#Covers":{"title":"Covers","titleInlineContent":[{"type":"text","text":"Covers"}],"type":"link","identifier":"#Covers","url":"#Covers"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/DestructuringViews":{"role":"article","title":"Destructuring views","abstract":[{"type":"text","text":"Learn how to use "},{"type":"codeVoice","code":"IfLet"},{"type":"text","text":", "},{"type":"codeVoice","code":"IfCaseLet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Switch"},{"type":"text","text":" views in order to destructure bindings into"},{"type":"text","text":" "},{"type":"text","text":"smaller parts."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/DestructuringViews","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/destructuringviews"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/Bindings":{"role":"article","title":"Bindings","abstract":[{"type":"text","text":"Learn how to manage certain view state, such as "},{"type":"codeVoice","code":"@FocusState"},{"type":"text","text":" directly in your observable object."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Bindings","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/bindings"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/WhatIsNavigation":{"role":"collectionGroup","title":"What is navigation?","abstract":[{"type":"text","text":"Learn how one can think of navigation as a domain modeling problem, and how that leads to the"},{"type":"text","text":" "},{"type":"text","text":"creation of concise and testable APIs for navigation."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/WhatIsNavigation","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/whatisnavigation"},"doc://SwiftUINavigation/documentation/SwiftUINavigation":{"role":"collection","title":"SwiftUINavigation","abstract":[{"type":"text","text":"Tools for making SwiftUI navigation simpler, more ergonomic and more precise."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation","kind":"symbol","type":"topic","url":"\/documentation\/swiftuinavigation"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/AlertsDialogs":{"role":"article","title":"Alerts and dialogs","abstract":[{"type":"text","text":"Learn how to present alerts and confirmation dialogs in a concise and testable manner."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/AlertsDialogs","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/alertsdialogs"},"#Sheets":{"title":"Sheets","titleInlineContent":[{"type":"text","text":"Sheets"}],"type":"link","identifier":"#Sheets","url":"#Sheets"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/Navigation":{"role":"article","title":"Navigation links and destinations","abstract":[{"type":"text","text":"Learn how to drive navigation in "},{"type":"codeVoice","code":"NavigationView"},{"type":"text","text":" and "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" in a concise and testable"},{"type":"text","text":" "},{"type":"text","text":"manner."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Navigation","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/navigation"}}}