{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Often our views can hold bindings of optional and enum state, and we will want to derive a binding"},{"type":"text","text":" "},{"type":"text","text":"to its underlying wrapped value or a particular case. SwiftUI does not come with tools to do this,"},{"type":"text","text":" "},{"type":"text","text":"but this library has a few views for accomplishing this."}]},{"anchor":"IfLet","level":3,"type":"heading","text":"IfLet"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfLet"},{"type":"text","text":" view allows one to derive a binding of an honest value from a binding of an optional"},{"type":"text","text":" "},{"type":"text","text":"value. For example, suppose you had an interface that could editing a single piece of text in the"},{"type":"text","text":" "},{"type":"text","text":"UI, and further those changes can be either saved or discarded."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfLet"},{"type":"text","text":" you can model the state of being in editing mode as an optional string:"}]},{"type":"codeListing","syntax":"swift","code":["struct EditView: View {","  @State var string: String = \"\"","  @State var editableString: String?","","  var body: some View {","    Form {","      IfLet(self.$editableString) { $string in","        TextField(\"Edit string\", text: $string)","        HStack {","          Button(\"Cancel\") {","            self.editableString = nil","          }","          Button(\"Save\") {","            self.string = string","            self.editableString = nil","          }","        }","      } else: {","        Text(\"\\(self.string)\")","        Button(\"Edit\") {","          self.editableString = self.string","        }","      }","      .buttonStyle(.borderless)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the most optimal way to model this domain. Without the ability to deriving a"},{"type":"text","text":" "},{"type":"codeVoice","code":"Binding<String>"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"Binding<String?>"},{"type":"text","text":" we would have had to hold onto extra state to represent"},{"type":"text","text":" "},{"type":"text","text":"whether or not we are in editing mode:"}]},{"type":"codeListing","syntax":"swift","code":["struct EditView: View {","  @State var string: String = \"\"","  @State var editableString: String","  @State var isEditing = false","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is non-optimal because we have to make sure to clean up "},{"type":"codeVoice","code":"editableString"},{"type":"text","text":" before or after"},{"type":"text","text":" "},{"type":"text","text":"showing the editable "},{"type":"codeVoice","code":"TextField"},{"type":"text","text":". If we forget to do that we can introduce bugs into our"},{"type":"text","text":" "},{"type":"text","text":"application, such as showing the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"previous"}]},{"type":"text","text":" editing string when entering edit mode."}]},{"anchor":"IfCaseLet","level":3,"type":"heading","text":"IfCaseLet"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfCaseLet"},{"type":"text","text":" view is similar to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfLet"},{"type":"text","text":" (see "},{"type":"reference","isActive":true,"identifier":"#IfLet"},{"type":"text","text":"), except it can derive a binding"},{"type":"text","text":" "},{"type":"text","text":"to a particular case of an enum."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, using the sample code from "},{"overridingTitleInlineContent":[{"type":"text","text":"above"}],"isActive":true,"type":"reference","identifier":"#IfLet","overridingTitle":"above"},{"type":"text","text":", what if you didn’t want to use an optional"},{"type":"text","text":" "},{"type":"text","text":"string for "},{"type":"codeVoice","code":"editableState"},{"type":"text","text":", but instead use a custom enum so that you can describe the two states"},{"type":"text","text":" "},{"type":"text","text":"more clearly:"}]},{"type":"codeListing","syntax":"swift","code":["enum EditableString {","  case active(String)","  case inactive","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfLet"},{"type":"text","text":" with this because it’s an enum, but you can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfCaseLet"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct EditView: View {","  @State var string: String = \"\"","  @State var editableString: EditableString = .inactive","","  var body: some View {","    Form {","      IfCaseLet(self.$editableString, pattern: \/EditableString.active) { $string in","        TextField(\"Edit string\", text: $string)","        HStack {","          Button(\"Cancel\") {","            self.editableString = nil","          }","          Button(\"Save\") {","            self.string = string","            self.editableString = nil","          }","        }","      } else: {","        Text(\"\\(self.string)\")","        Button(\"Edit\") {","          self.editableString = self.string","        }","      }","      .buttonStyle(.borderless)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The “pattern” for the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfCaseLet"},{"type":"text","text":" is expressed by what is known as a “"},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"type":"text","text":"”."},{"type":"text","text":" "},{"type":"text","text":"A case path is like a key path, except it is specifically tuned for abstracting over the"},{"type":"text","text":" "},{"type":"text","text":"shape of enums rather than structs. A key path abstractly bundles up the functionality of getting"},{"type":"text","text":" "},{"type":"text","text":"and setting a property on a struct, whereas a case path bundles up the functionality of “extracting”"},{"type":"text","text":" "},{"type":"text","text":"a value from an enum and “embedding” a value into an enum. They are an indispensible tool for"},{"type":"text","text":" "},{"type":"text","text":"transforming bindings."}]},{"anchor":"Switch-and-CaseLet","level":3,"type":"heading","text":"Switch and CaseLet"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Switch"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/CaseLet"},{"type":"text","text":" generalize the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfLet"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfCaseLet"},{"type":"text","text":" views, allowing you to"},{"type":"text","text":" "},{"type":"text","text":"destructure a binding of an enum into bindings of each case, and provides some runtime exhaustivity"},{"type":"text","text":" "},{"type":"text","text":"checking."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, a warehousing application may model the status of an inventory item using an enum"},{"type":"text","text":" "},{"type":"text","text":"with cases that distinguish in-stock and out-of-stock statuses. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Switch"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/CaseLet"},{"type":"text","text":" can"},{"type":"text","text":" "},{"type":"text","text":"be used to produce bindings to the associated values of each case."}]},{"type":"codeListing","syntax":"swift","code":["enum ItemStatus {","  case inStock(quantity: Int)","  case outOfStock(isOnBackOrder: Bool)","}","","struct InventoryItemView {","  @State var status: ItemStatus","","  var body: some View {","    Switch(self.$status) {","      CaseLet(\/ItemStatus.inStock) { $quantity in","        HStack {","          Text(\"Quantity: \\(quantity)\")","          Stepper(\"Quantity\", value: $quantity)","        }","        Button(\"Out of stock\") { self.status = .outOfStock(isOnBackOrder: false) }","      }","      CaseLet(\/ItemStatus.outOfStock) { $isOnBackOrder in","        Toggle(\"Is on back order?\", isOn: $isOnBackOrder)","        Button(\"In stock\") { self.status = .inStock(quantity: 1) }","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In debug builds, exhaustivity is handled at runtime: if the "},{"type":"codeVoice","code":"Switch"},{"type":"text","text":" encounters an"},{"type":"text","text":" "},{"type":"text","text":"unhandled case, and no "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Default"},{"type":"text","text":" view is present, a runtime warning is issued and a warning"},{"type":"text","text":" "},{"type":"text","text":"view is presented."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftuinavigation\/destructuringviews"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/DestructuringViews","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to use "},{"type":"codeVoice","code":"IfLet"},{"type":"text","text":", "},{"type":"codeVoice","code":"IfCaseLet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Switch"},{"type":"text","text":" views in order to destructure bindings into"},{"type":"text","text":" "},{"type":"text","text":"smaller parts."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Destructuring views","role":"article","modules":[{"name":"SwiftUINavigation"}]},"hierarchy":{"paths":[["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation"],["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/WhatIsNavigation"]]},"seeAlsoSections":[{"title":"Tools","identifiers":["doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Navigation","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/SheetsPopoversCovers","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/AlertsDialogs","doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Bindings"],"generated":true}],"references":{"doc://SwiftUINavigation/documentation/SwiftUINavigation/Default":{"role":"symbol","title":"Default","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"}],"abstract":[{"type":"text","text":"A view that covers any cases that aren’t explicitly addressed in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Switch"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Default","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Default"}],"url":"\/documentation\/swiftuinavigation\/default"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/CaseLet":{"role":"symbol","title":"CaseLet","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Switch"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/CaseLet","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CaseLet"}],"url":"\/documentation\/swiftuinavigation\/caselet"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/IfCaseLet":{"role":"symbol","title":"IfCaseLet","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfCaseLet"}],"abstract":[{"type":"text","text":"A view that computes content by extracting a case from a binding to an enum and passing a"},{"type":"text","text":" "},{"type":"text","text":"non-optional binding to the case’s associated value to its content closure."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfCaseLet","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IfCaseLet"}],"url":"\/documentation\/swiftuinavigation\/ifcaselet"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/AlertsDialogs":{"role":"article","title":"Alerts and dialogs","abstract":[{"type":"text","text":"Learn how to present alerts and confirmation dialogs in a concise and testable manner."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/AlertsDialogs","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/alertsdialogs"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/Navigation":{"role":"article","title":"Navigation links and destinations","abstract":[{"type":"text","text":"Learn how to drive navigation in "},{"type":"codeVoice","code":"NavigationView"},{"type":"text","text":" and "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" in a concise and testable"},{"type":"text","text":" "},{"type":"text","text":"manner."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Navigation","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/navigation"},"#IfLet":{"title":"above","titleInlineContent":[{"type":"text","text":"above"}],"type":"link","identifier":"#IfLet","url":"#IfLet"},"http://github.com/pointfreeco/swift-case-paths":{"title":"case path","titleInlineContent":[{"type":"text","text":"case path"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/Bindings":{"role":"article","title":"Bindings","abstract":[{"type":"text","text":"Learn how to manage certain view state, such as "},{"type":"codeVoice","code":"@FocusState"},{"type":"text","text":" directly in your observable object."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Bindings","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/bindings"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/SheetsPopoversCovers":{"role":"article","title":"Sheets, popovers, and covers","abstract":[{"type":"text","text":"Learn how to present sheets, popovers and covers in a concise and testable manner."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/SheetsPopoversCovers","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/sheetspopoverscovers"},"doc://SwiftUINavigation/documentation/SwiftUINavigation":{"role":"collection","title":"SwiftUINavigation","abstract":[{"type":"text","text":"Tools for making SwiftUI navigation simpler, more ergonomic and more precise."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation","kind":"symbol","type":"topic","url":"\/documentation\/swiftuinavigation"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/IfLet":{"role":"symbol","title":"IfLet","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLet"}],"abstract":[{"type":"text","text":"A view that computes content by unwrapping a binding to an optional and passing a non-optional"},{"type":"text","text":" "},{"type":"text","text":"binding to its content closure."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/IfLet","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IfLet"}],"url":"\/documentation\/swiftuinavigation\/iflet"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/Switch":{"role":"symbol","title":"Switch","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Switch"}],"abstract":[{"type":"text","text":"A view that can switch over a binding of enum state and exhaustively handle each case."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/Switch","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Switch"}],"url":"\/documentation\/swiftuinavigation\/switch"},"doc://SwiftUINavigation/documentation/SwiftUINavigation/WhatIsNavigation":{"role":"collectionGroup","title":"What is navigation?","abstract":[{"type":"text","text":"Learn how one can think of navigation as a domain modeling problem, and how that leads to the"},{"type":"text","text":" "},{"type":"text","text":"creation of concise and testable APIs for navigation."}],"identifier":"doc:\/\/SwiftUINavigation\/documentation\/SwiftUINavigation\/WhatIsNavigation","kind":"article","type":"topic","url":"\/documentation\/swiftuinavigation\/whatisnavigation"}}}